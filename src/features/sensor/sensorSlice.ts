import { createAsyncThunk, createSlice, current, PayloadAction } from '@reduxjs/toolkit';

import { RootState } from '../../app/store';
import { Sensor } from './sensorModel';

export interface SensorState {
  sensors: Sensor[];
  status: 'idle' | 'loading' | 'failed';
}

const initialState: SensorState = {
  sensors: [],
  status: 'idle',
};

export const sensorSlice = createSlice({
  name: 'sensor',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    connectionStatus: (state, action: PayloadAction<boolean>) => {
      state.status = action.payload ? 'idle' : 'loading';
    },

    updateSensor: (state, action: PayloadAction<Sensor>) => {
      const sensors = current(state.sensors);
      const newSensors = [...sensors];
      const index = newSensors.findIndex((s) => s.id === action.payload.id);
      if (index) {
        newSensors[index] = action.payload;
      }
      state.sensors = newSensors;
    },

    updateSensors: (state, action: PayloadAction<Sensor>) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      const sensors = current(state.sensors);
      let newSensors = [...sensors];
      
      const index = newSensors.findIndex((s) => s.id === action.payload.id);
      console.log('newSensors', index, action.payload);
      if (index !== -1) {
        newSensors[index] = action.payload;
      } else {
        newSensors = [action.payload];
      }

      state.sensors = newSensors;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => { },
});

export const { connectionStatus, updateSensors, updateSensor } = sensorSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.sensor.sensors)`
export const selectSensorList = (state: RootState) => state.sensor.sensors;

export const selectSensorStatus = (state: RootState) =>
  state.sensor.status;

export default sensorSlice.reducer;